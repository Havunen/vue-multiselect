!function (e, t) {
  "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.VueMultiselect = t() : e.VueMultiselect = t()
}(self, (function () {
  return function () {
    "use strict";
    var e = {
      d: function (t, i) {
        for (var s in i) e.o(i, s) && !e.o(t, s) && Object.defineProperty(t, s, {enumerable: !0, get: i[s]})
      }, o: function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
      }, r: function (e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e, "__esModule", {value: !0})
      }
    }, t = {};
    e.r(t), e.d(t, {
      Multiselect: function () {
        return h
      }, default: function () {
        return p
      }, multiselectMixin: function () {
        return o
      }, pointerMixin: function () {
        return a
      }
    });

    function i(e) {
      return 0 !== e && (!(!Array.isArray(e) || 0 !== e.length) || !e)
    }

    function s(e, t, i, s) {
      return e.filter((e => {
        return n = s(e, i), l = t, void 0 === n && (n = "undefined"), null === n && (n = "null"), !1 === n && (n = "false"), -1 !== n.toString().toLowerCase().indexOf(l.trim());
        var n, l
      }))
    }

    function n(e) {
      return e.filter((e => !e.$isLabel))
    }

    function l(e, t) {
      return i => i.reduce(((i, s) => s[e] && s[e].length ? (i.push({
        $groupLabel: s[t],
        $isLabel: !0
      }), i.concat(s[e])) : i), [])
    }

    const r = function () {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
      return e => t.reduce(((e, t) => t(e)), e)
    };
    var o = {
      data() {
        return {search: "", isOpen: !1, preferredOpenDirection: "below", optimizedHeight: this.maxHeight}
      }, props: {
        internalSearch: {type: Boolean, default: !0},
        options: {type: Array, required: !0},
        multiple: {type: Boolean, default: !1},
        value: {
          type: null, default() {
            return []
          }
        },
        trackBy: {type: String},
        label: {type: String},
        searchable: {type: Boolean, default: !0},
        clearOnSelect: {type: Boolean, default: !0},
        hideSelected: {type: Boolean, default: !1},
        placeholder: {type: String, default: "Select option"},
        allowEmpty: {type: Boolean, default: !0},
        resetAfter: {type: Boolean, default: !1},
        closeOnSelect: {type: Boolean, default: !0},
        customLabel: {
          type: Function, default(e, t) {
            return i(e) ? "" : t ? e[t] : e
          }
        },
        taggable: {type: Boolean, default: !1},
        tagPlaceholder: {type: String, default: "Press enter to create a tag"},
        tagPosition: {type: String, default: "top"},
        max: {type: [Number, Boolean], default: !1},
        id: {default: null},
        optionsLimit: {type: Number, default: 1e3},
        groupValues: {type: String},
        groupLabel: {type: String},
        groupSelect: {type: Boolean, default: !1},
        blockKeys: {
          type: Array, default() {
            return []
          }
        },
        preserveSearch: {type: Boolean, default: !1},
        preselectFirst: {type: Boolean, default: !1},
        preventAutofocus: {type: Boolean, default: !1}
      }, mounted() {
        !this.multiple && this.max && console.warn("[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false."), this.preselectFirst && !this.internalValue.length && this.options.length && this.select(this.filteredOptions[0])
      }, computed: {
        internalValue() {
          return this.value || 0 === this.value ? Array.isArray(this.value) ? this.value : [this.value] : []
        }, filteredOptions() {
          const e = this.search || "", t = e.toLowerCase().trim();
          let i = this.options.concat();
          var n;
          return i = this.internalSearch ? this.groupValues ? this.filterAndFlat(i, t, this.label) : s(i, t, this.label, this.customLabel) : this.groupValues ? l(this.groupValues, this.groupLabel)(i) : i, i = this.hideSelected ? i.filter((n = this.isSelected, function () {
            return !n(...arguments)
          })) : i, this.taggable && t.length && !this.isExistingOption(t) && ("bottom" === this.tagPosition ? i.push({
            isTag: !0,
            label: e
          }) : i.unshift({isTag: !0, label: e})), i.slice(0, this.optionsLimit)
        }, valueKeys() {
          return this.trackBy ? this.internalValue.map((e => e[this.trackBy])) : this.internalValue
        }, optionKeys() {
          return (this.groupValues ? this.flatAndStrip(this.options) : this.options).map((e => this.customLabel(e, this.label).toString().toLowerCase()))
        }, currentOptionLabel() {
          return this.multiple ? this.searchable ? "" : this.placeholder : this.internalValue.length ? this.getOptionLabel(this.internalValue[0]) : this.searchable ? "" : this.placeholder
        }
      }, watch: {
        internalValue() {
          this.resetAfter && this.internalValue.length && (this.search = "", this.$emit("input", this.multiple ? [] : null))
        }, search() {
          this.$emit("search-change", this.search, this.id)
        }
      }, methods: {
        getValue() {
          return this.multiple ? this.internalValue : 0 === this.internalValue.length ? null : this.internalValue[0]
        }, filterAndFlat(e, t, i) {
          return r(function (e, t, i, n, l) {
            return r => r.map((r => {
              if (!r[i]) return console.warn("Options passed to vue-multiselect do not contain groups, despite the config."), [];
              const o = s(r[i], e, t, l);
              return o.length ? {[n]: r[n], [i]: o} : []
            }))
          }(t, i, this.groupValues, this.groupLabel, this.customLabel), l(this.groupValues, this.groupLabel))(e)
        }, flatAndStrip(e) {
          return r(l(this.groupValues, this.groupLabel), n)(e)
        }, updateSearch(e) {
          this.search = e
        }, isExistingOption(e) {
          return !!this.options && this.optionKeys.indexOf(e) > -1
        }, isSelected(e) {
          const t = this.trackBy ? e[this.trackBy] : e;
          return this.valueKeys.indexOf(t) > -1
        }, isOptionDisabled(e) {
          return !!e.$isDisabled
        }, getOptionLabel(e) {
          if (i(e)) return "";
          if (e.isTag) return e.label;
          if (e.$isLabel) return e.$groupLabel;
          let t = this.customLabel(e, this.label);
          return i(t) ? "" : t
        }, select(e, t) {
          if (e.$isLabel && this.groupSelect) this.selectGroup(e); else if (!(-1 !== this.blockKeys.indexOf(t) || this.disabled || e.$isDisabled || e.$isLabel) && (!this.max || !this.multiple || this.internalValue.length !== this.max) && ("Tab" !== t || this.pointerDirty)) {
            if (e.isTag) this.$emit("tag", e.label, this.id), this.search = "", this.closeOnSelect && !this.multiple && this.deactivate(); else {
              if (this.isSelected(e)) return void ("Tab" !== t && this.removeElement(e));
              this.multiple ? this.$emit("input", this.internalValue.concat([e]), this.id) : this.$emit("input", e, this.id), this.$emit("select", e, this.id), this.clearOnSelect && (this.search = "")
            }
            this.closeOnSelect && this.deactivate()
          }
        }, selectGroup(e) {
          const t = this.options.find((t => t[this.groupLabel] === e.$groupLabel));
          if (t) {
            if (this.wholeGroupSelected(t)) {
              this.$emit("remove", t[this.groupValues], this.id);
              const e = this.internalValue.filter((e => -1 === t[this.groupValues].indexOf(e)));
              this.$emit("input", e, this.id)
            } else {
              let e = t[this.groupValues].filter((e => !(this.isOptionDisabled(e) || this.isSelected(e))));
              this.max && e.splice(this.max - this.internalValue.length), this.$emit("select", e, this.id), this.$emit("input", this.internalValue.concat(e), this.id)
            }
            this.closeOnSelect && this.deactivate()
          }
        }, wholeGroupSelected(e) {
          return e[this.groupValues].every((e => this.isSelected(e) || this.isOptionDisabled(e)))
        }, wholeGroupDisabled(e) {
          return e[this.groupValues].every(this.isOptionDisabled)
        }, removeElement(e) {
          let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.disabled) return;
          if (e.$isDisabled) return;
          if (!this.allowEmpty && this.internalValue.length <= 1) return void this.deactivate();
          const i = "object" == typeof e ? this.valueKeys.indexOf(e[this.trackBy]) : this.valueKeys.indexOf(e);
          if (this.multiple) {
            const e = this.internalValue.slice(0, i).concat(this.internalValue.slice(i + 1));
            this.$emit("input", e, this.id)
          } else this.$emit("input", null, this.id);
          this.$emit("remove", e, this.id), this.closeOnSelect && t && this.deactivate()
        }, removeLastElement() {
          -1 === this.blockKeys.indexOf("Delete") && 0 === this.search.length && Array.isArray(this.internalValue) && this.internalValue.length && this.removeElement(this.internalValue[this.internalValue.length - 1], !1)
        }, activate() {
          this.isOpen || this.disabled || (this.adjustPosition(), this.groupValues && 0 === this.pointer && this.filteredOptions.length && (this.pointer = 1), this.isOpen = !0, this.searchable ? (this.preserveSearch || (this.search = ""), this.preventAutofocus || this.$nextTick((() => this.$refs.search && this.$refs.search.focus()))) : this.preventAutofocus || void 0 !== this.$el && this.$el.focus(), this.$emit("open", this.id))
        }, deactivate() {
          this.isOpen && (this.isOpen = !1, this.searchable ? void 0 !== this.$refs.search && this.$refs.search.blur() : void 0 !== this.$el && this.$el.blur(), this.preserveSearch || (this.search = ""), this.$emit("close", this.getValue(), this.id))
        }, toggle() {
          this.isOpen ? this.deactivate() : this.activate()
        }, adjustPosition() {
          if ("undefined" == typeof window) return;
          const e = this.$el.getBoundingClientRect().top,
            t = window.innerHeight - this.$el.getBoundingClientRect().bottom;
          t > this.maxHeight || t > e || "below" === this.openDirection || "bottom" === this.openDirection ? (this.preferredOpenDirection = "below", this.optimizedHeight = Math.min(t - 40, this.maxHeight)) : (this.preferredOpenDirection = "above", this.optimizedHeight = Math.min(e - 40, this.maxHeight))
        }
      }
    }, a = {
      data() {
        return {pointer: 0, pointerDirty: !1}
      },
      props: {showPointer: {type: Boolean, default: !0}, optionHeight: {type: Number, default: 40}},
      computed: {
        pointerPosition() {
          return this.pointer * this.optionHeight
        }, visibleElements() {
          return this.optimizedHeight / this.optionHeight
        }
      },
      watch: {
        filteredOptions() {
          this.pointerAdjust()
        }, isOpen() {
          this.pointerDirty = !1
        }, pointer() {
          this.$refs.search && this.$refs.search.setAttribute("aria-activedescendant", this.id + "-" + this.pointer.toString())
        }
      },
      methods: {
        optionHighlight(e, t) {
          return {
            "multiselect__option--highlight": e === this.pointer && this.showPointer,
            "multiselect__option--selected": this.isSelected(t)
          }
        }, groupHighlight(e, t) {
          if (!this.groupSelect) return ["multiselect__option--disabled", {"multiselect__option--group": t.$isLabel}];
          const i = this.options.find((e => e[this.groupLabel] === t.$groupLabel));
          return i && !this.wholeGroupDisabled(i) ? ["multiselect__option--group", {"multiselect__option--highlight": e === this.pointer && this.showPointer}, {"multiselect__option--group-selected": this.wholeGroupSelected(i)}] : "multiselect__option--disabled"
        }, addPointerElement() {
          let {key: e} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Enter";
          this.filteredOptions.length > 0 && this.select(this.filteredOptions[this.pointer], e), this.pointerReset()
        }, pointerForward() {
          this.pointer < this.filteredOptions.length - 1 && (this.pointer++, this.$refs.list.scrollTop <= this.pointerPosition - (this.visibleElements - 1) * this.optionHeight && (this.$refs.list.scrollTop = this.pointerPosition - (this.visibleElements - 1) * this.optionHeight), this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect && this.pointerForward()), this.pointerDirty = !0
        }, pointerBackward() {
          this.pointer > 0 ? (this.pointer--, this.$refs.list.scrollTop >= this.pointerPosition && (this.$refs.list.scrollTop = this.pointerPosition), this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect && this.pointerBackward()) : this.filteredOptions[this.pointer] && this.filteredOptions[0].$isLabel && !this.groupSelect && this.pointerForward(), this.pointerDirty = !0
        }, pointerReset() {
          this.closeOnSelect && (this.pointer = 0, this.$refs.list && (this.$refs.list.scrollTop = 0))
        }, pointerAdjust() {
          this.pointer >= this.filteredOptions.length - 1 && (this.pointer = this.filteredOptions.length ? this.filteredOptions.length - 1 : 0), this.filteredOptions.length > 0 && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect && this.pointerForward()
        }, pointerSet(e) {
          this.pointer = e, this.pointerDirty = !0
        }
      }
    };
    var u = function (e, t, i, s, n, l, r, o) {
      var a, u = "function" == typeof e ? e.options : e;
      if (t && (u.render = t, u.staticRenderFns = i, u._compiled = !0), s && (u.functional = !0), l && (u._scopeId = "data-v-" + l), r ? (a = function (e) {
        (e = e || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (e = __VUE_SSR_CONTEXT__), n && n.call(this, e), e && e._registeredComponents && e._registeredComponents.add(r)
      }, u._ssrRegister = a) : n && (a = o ? function () {
        n.call(this, (u.functional ? this.parent : this).$root.$options.shadowRoot)
      } : n), a) if (u.functional) {
        u._injectStyles = a;
        var h = u.render;
        u.render = function (e, t) {
          return a.call(t), h(e, t)
        }
      } else {
        var p = u.beforeCreate;
        u.beforeCreate = p ? [].concat(p, a) : [a]
      }
      return {exports: e, options: u}
    }({
      name: "vue-multiselect",
      mixins: [o, a],
      props: {
        name: {type: String, default: ""},
        selectLabel: {type: String, default: "Press enter to select"},
        selectGroupLabel: {type: String, default: "Press enter to select group"},
        selectedLabel: {type: String, default: "Selected"},
        deselectLabel: {type: String, default: "Press enter to remove"},
        deselectGroupLabel: {type: String, default: "Press enter to deselect group"},
        showLabels: {type: Boolean, default: !0},
        limit: {type: Number, default: 99999},
        maxHeight: {type: Number, default: 300},
        limitText: {type: Function, default: e => `and ${e} more`},
        loading: {type: Boolean, default: !1},
        disabled: {type: Boolean, default: !1},
        openDirection: {type: String, default: ""},
        showNoOptions: {type: Boolean, default: !0},
        showNoResults: {type: Boolean, default: !0},
        tabindex: {type: Number, default: 0}
      },
      computed: {
        hasOptionGroup() {
          return this.groupValues && this.groupLabel && this.groupSelect
        }, isSingleLabelVisible() {
          return (this.singleValue || 0 === this.singleValue) && (!this.isOpen || !this.searchable) && !this.visibleValues.length
        }, isPlaceholderVisible() {
          return !(this.internalValue.length || this.searchable && this.isOpen)
        }, visibleValues() {
          return this.multiple ? this.internalValue.slice(0, this.limit) : []
        }, singleValue() {
          return this.internalValue[0]
        }, deselectLabelText() {
          return this.showLabels ? this.deselectLabel : ""
        }, deselectGroupLabelText() {
          return this.showLabels ? this.deselectGroupLabel : ""
        }, selectLabelText() {
          return this.showLabels ? this.selectLabel : ""
        }, selectGroupLabelText() {
          return this.showLabels ? this.selectGroupLabel : ""
        }, selectedLabelText() {
          return this.showLabels ? this.selectedLabel : ""
        }, inputStyle() {
          return this.searchable || this.multiple && this.value && this.value.length ? this.isOpen ? {width: "100%"} : {
            width: "0",
            position: "absolute",
            padding: "0"
          } : ""
        }, contentStyle() {
          return this.options.length ? {display: "inline-block"} : {display: "block"}
        }, isAbove() {
          return "above" === this.openDirection || "top" === this.openDirection || "below" !== this.openDirection && "bottom" !== this.openDirection && "above" === this.preferredOpenDirection
        }, showSearchInput() {
          return this.searchable && (!this.hasSingleSelectedSlot || !this.visibleSingleValue && 0 !== this.visibleSingleValue || this.isOpen)
        }
      }
    }, (function () {
      var e = this, t = e._self._c;
      return t("div", {
        staticClass: "multiselect",
        class: {
          "multiselect--active": e.isOpen,
          "multiselect--disabled": e.disabled,
          "multiselect--above": e.isAbove,
          "multiselect--has-options-group": e.hasOptionGroup
        },
        attrs: {tabindex: e.searchable ? -1 : e.tabindex, role: "combobox", "aria-owns": "listbox-" + e.id},
        on: {
          focus: function (t) {
            return e.activate()
          }, blur: function (t) {
            !e.searchable && e.deactivate()
          }, keydown: [function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "down", 40, t.key, ["Down", "ArrowDown"]) || t.target !== t.currentTarget ? null : (t.preventDefault(), e.pointerForward())
          }, function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "up", 38, t.key, ["Up", "ArrowUp"]) || t.target !== t.currentTarget ? null : (t.preventDefault(), e.pointerBackward())
          }], keypress: function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") && e._k(t.keyCode, "tab", 9, t.key, "Tab") ? null : (t.stopPropagation(), t.target !== t.currentTarget ? null : e.addPointerElement(t))
          }, keyup: function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "esc", 27, t.key, ["Esc", "Escape"]) ? null : e.deactivate()
          }
        }
      }, [e._t("caret", (function () {
        return [t("div", {
          staticClass: "multiselect__select", on: {
            mousedown: function (t) {
              return t.preventDefault(), t.stopPropagation(), e.toggle()
            }
          }
        })]
      }), {toggle: e.toggle}), e._v(" "), e._t("clear", null, {search: e.search}), e._v(" "), t("div", {
        ref: "tags",
        staticClass: "multiselect__tags"
      }, [e._t("selection", (function () {
        return [t("div", {
          directives: [{
            name: "show",
            rawName: "v-show",
            value: e.visibleValues.length > 0,
            expression: "visibleValues.length > 0"
          }], staticClass: "multiselect__tags-wrap"
        }, [e._l(e.visibleValues, (function (i, s) {
          return [e._t("tag", (function () {
            return [t("span", {
              key: s,
              staticClass: "multiselect__tag"
            }, [t("span", {domProps: {textContent: e._s(e.getOptionLabel(i))}}), e._v(" "), t("i", {
              staticClass: "multiselect__tag-icon",
              attrs: {tabindex: "1"},
              on: {
                keypress: function (t) {
                  return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") ? null : (t.preventDefault(), e.removeElement(i))
                }, mousedown: function (t) {
                  return t.preventDefault(), e.removeElement(i)
                }
              }
            })])]
          }), {option: i, search: e.search, remove: e.removeElement})]
        }))], 2), e._v(" "), e.internalValue && e.internalValue.length > e.limit ? [e._t("limit", (function () {
          return [t("strong", {
            staticClass: "multiselect__strong",
            domProps: {textContent: e._s(e.limitText(e.internalValue.length - e.limit))}
          })]
        }))] : e._e()]
      }), {
        search: e.search,
        remove: e.removeElement,
        values: e.visibleValues,
        isOpen: e.isOpen
      }), e._v(" "), t("transition", {attrs: {name: "multiselect__loading"}}, [e._t("loading", (function () {
        return [t("div", {
          directives: [{name: "show", rawName: "v-show", value: e.loading, expression: "loading"}],
          staticClass: "multiselect__spinner"
        })]
      }))], 2), e._v(" "), e.searchable ? t("input", {
        ref: "search",
        staticClass: "multiselect__input",
        style: e.inputStyle,
        attrs: {
          name: e.name,
          id: e.id,
          type: "text",
          autocomplete: "off",
          spellcheck: "false",
          placeholder: e.placeholder,
          disabled: e.disabled,
          tabindex: e.tabindex,
          "aria-controls": "listbox-" + e.id
        },
        domProps: {value: e.search},
        on: {
          input: function (t) {
            return e.updateSearch(t.target.value)
          }, focus: function (t) {
            return t.preventDefault(), e.activate()
          }, blur: function (t) {
            return t.preventDefault(), e.deactivate()
          }, keyup: function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "esc", 27, t.key, ["Esc", "Escape"]) ? null : e.deactivate()
          }, keydown: [function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "down", 40, t.key, ["Down", "ArrowDown"]) ? null : (t.preventDefault(), e.pointerForward())
          }, function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "up", 38, t.key, ["Up", "ArrowUp"]) ? null : (t.preventDefault(), e.pointerBackward())
          }, function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "delete", [8, 46], t.key, ["Backspace", "Delete", "Del"]) ? null : (t.stopPropagation(), e.removeLastElement())
          }], keypress: function (t) {
            return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") ? null : (t.preventDefault(), t.stopPropagation(), t.target !== t.currentTarget ? null : e.addPointerElement(t))
          }
        }
      }) : e._e(), e._v(" "), e.isSingleLabelVisible ? t("span", {
        staticClass: "multiselect__single",
        on: {
          mousedown: function (t) {
            return t.preventDefault(), e.toggle.apply(null, arguments)
          }
        }
      }, [e._t("singleLabel", (function () {
        return [[e._v(e._s(e.currentOptionLabel))]]
      }), {option: e.singleValue})], 2) : e._e(), e._v(" "), e.isPlaceholderVisible ? t("span", {
        staticClass: "multiselect__placeholder",
        on: {
          mousedown: function (t) {
            return t.preventDefault(), e.toggle.apply(null, arguments)
          }
        }
      }, [e._t("placeholder", (function () {
        return [e._v("\n          " + e._s(e.placeholder) + "\n        ")]
      }))], 2) : e._e()], 2), e._v(" "), t("transition", {attrs: {name: "multiselect"}}, [t("div", {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: e.isOpen,
          expression: "isOpen"
        }],
        ref: "list",
        staticClass: "multiselect__content-wrapper",
        style: {maxHeight: e.optimizedHeight + "px"},
        attrs: {tabindex: "-1"},
        on: {
          focus: e.activate, mousedown: function (e) {
            e.preventDefault()
          }
        }
      }, [t("ul", {
        staticClass: "multiselect__content",
        style: e.contentStyle,
        attrs: {role: "listbox", id: "listbox-" + e.id}
      }, [e._t("beforeList"), e._v(" "), e.multiple && e.max === e.internalValue.length ? t("li", [t("span", {staticClass: "multiselect__option"}, [e._t("maxElements", (function () {
        return [e._v("Maximum of " + e._s(e.max) + " options selected. First remove a selected option to select another.")]
      }))], 2)]) : e._e(), e._v(" "), !e.max || e.internalValue.length < e.max ? e._l(e.filteredOptions, (function (i, s) {
        return t("li", {
          key: s,
          staticClass: "multiselect__element",
          attrs: {id: e.id + "-" + s, role: i && (i.$isLabel || i.$isDisabled) ? null : "option"}
        }, [i && (i.$isLabel || i.$isDisabled) ? e._e() : t("span", {
          staticClass: "multiselect__option",
          class: e.optionHighlight(s, i),
          attrs: {
            "data-select": i && i.isTag ? e.tagPlaceholder : e.selectLabelText,
            "data-selected": e.selectedLabelText,
            "data-deselect": e.deselectLabelText
          },
          on: {
            click: function (t) {
              return t.stopPropagation(), e.select(i)
            }, mouseenter: function (t) {
              return t.target !== t.currentTarget ? null : e.pointerSet(s)
            }
          }
        }, [e._t("option", (function () {
          return [t("span", [e._v(e._s(e.getOptionLabel(i)))])]
        }), {
          option: i,
          search: e.search,
          index: s
        })], 2), e._v(" "), i && (i.$isLabel || i.$isDisabled) ? t("span", {
          staticClass: "multiselect__option",
          class: e.groupHighlight(s, i),
          attrs: {
            "data-select": e.groupSelect && e.selectGroupLabelText,
            "data-deselect": e.groupSelect && e.deselectGroupLabelText
          },
          on: {
            mouseenter: function (t) {
              if (t.target !== t.currentTarget) return null;
              e.groupSelect && e.pointerSet(s)
            }, mousedown: function (t) {
              return t.preventDefault(), e.selectGroup(i)
            }
          }
        }, [e._t("option", (function () {
          return [t("span", [e._v(e._s(e.getOptionLabel(i)))])]
        }), {option: i, search: e.search, index: s})], 2) : e._e()])
      })) : e._e(), e._v(" "), t("li", {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: e.showNoResults && 0 === e.filteredOptions.length && e.search && !e.loading,
          expression: "showNoResults && (filteredOptions.length === 0 && search && !loading)"
        }]
      }, [t("span", {staticClass: "multiselect__option"}, [e._t("noResult", (function () {
        return [e._v("No elements found. Consider changing the search query.")]
      }), {search: e.search})], 2)]), e._v(" "), t("li", {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: e.showNoOptions && (0 === e.options.length || !0 === e.hasOptionGroup && 0 === e.filteredOptions.length) && !e.search && !e.loading,
          expression: "showNoOptions && ((options.length === 0 || (hasOptionGroup === true && filteredOptions.length === 0)) && !search && !loading)"
        }]
      }, [t("span", {staticClass: "multiselect__option"}, [e._t("noOptions", (function () {
        return [e._v("List is empty.")]
      }))], 2)]), e._v(" "), e._t("afterList")], 2)])])], 2)
    }), [], !1, null, null, null), h = u.exports, p = h;
    return t
  }()
}));
//# sourceMappingURL=vue-multiselect.min.js.map
